import ollama
import os
import subprocess
from pathlib import Path
from time import sleep

def get_code_from_project(project_path, extensions=(".py", ".txt", ".md", ".yaml", ".yml", "Dockerfile", "docker-compose.yml")):
    """–°–æ–±–∏—Ä–∞–µ—Ç –∫–æ–¥ –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞, –≤–∫–ª—é—á–∞—è Docker-–∫–æ–Ω—Ñ–∏–≥–∏."""
    code_content = []
    for root, _, files in os.walk(project_path):
        for file in files:
            if file.endswith(extensions):
                file_path = Path(root) / file
                try:
                    with open(file_path, "r", encoding="utf-8") as f:
                        content = f.read()
                        code_content.append(f"=== –§–∞–π–ª: {file} ===\n{content}\n")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
    return "\n".join(code_content)

def analyze_with_ollama(prompt, model="llama3"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ Ollama –∏ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
    response = ollama.chat(
        model=model,
        messages=[{"role": "user", "content": prompt}],
    )
    return response["message"]["content"]

def deploy_with_docker():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä–∫—É –∏ –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ docker-compose."""
    try:
        # –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
        subprocess.run(["docker-compose", "build"], check=True)
        # –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
        subprocess.run(["docker-compose", "up", "-d"], check=True)
        print("‚úÖ –î–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ Docker Compose –∑–∞–≤–µ—Ä—à—ë–Ω.")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–ø–ª–æ—è: {e}")
        return False

def check_container_health():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —á–µ—Ä–µ–∑ docker inspect."""
    try:
        result = subprocess.run(
            ["docker", "inspect", "--format='{{.State.Health.Status}}'", "urfu-fresh-scanner-FreshScannerBot-1"],
            capture_output=True, text=True
        )
        status = result.stdout.strip("'\n")
        return status == "healthy"
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è: {e}")
        return False

def rollback_docker():
    """–û—Ç–∫–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–ø–ª–æ–π: –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ —É–¥–∞–ª—è–µ—Ç –æ–±—Ä–∞–∑—ã."""
    print("üîÑ –û—Ç–∫–∞—Ç—ã–≤–∞—é –¥–µ–ø–ª–æ–π...")
    subprocess.run(["docker-compose", "down", "--rmi", "all"])

if __name__ == "__main__":
    project_path = "C:/Users/matve/PycharmProjects/urfu-fresh-scanner"
    code = get_code_from_project(project_path)

    if not code:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        exit()

    # 1. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
    prompt = f"""
    –í–æ—Ç –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ (–≤–∫–ª—é—á–∞—è Docker-–∫–æ–Ω—Ñ–∏–≥–∏):
    {code}

    –ó–∞–¥–∞—á–∏:
    1. –ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ Dockerfile –∏ docker-compose.yml –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.
    2. –ü—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è (docker-compose up -d).
    3. –ö–∞–∫ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è self-healing?
    –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
    """
    print("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∫–æ–¥...\n")
    analysis_result = analyze_with_ollama(prompt)
    print(analysis_result)

    # 2. –î–µ–ø–ª–æ–π
    if input("–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ Docker? (y/n): ").lower() == "y":
        print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –¥–µ–ø–ª–æ–π...")
        if deploy_with_docker():
            # 3. Self-healing: –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
            sleep(10)  # –ñ–¥—ë–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            if not check_container_health():
                rollback_docker()
                print("üî¥ Self-healing: –¥–µ–ø–ª–æ–π –æ—Ç–∫–∞—á–µ–Ω –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏.")
            else:
                print("üü¢ Self-healing: –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.")